#!/usr/bin/env python2

import commands
import tempfile
import csv
import numpy
from IPython import embed
from gi.repository import Gtk
import matplotlib
from matplotlib.figure import Figure
from matplotlib.backends.backend_gtk3agg import FigureCanvasGTK3Agg as FigureCanvas
from matplotlib.backends.backend_gtk3 import NavigationToolbar2GTK3 as NavigationToolbar

###############################################################################
# CLI interaction                                                             #
###############################################################################

class CLI:

    def __init__(self):
        pass

    def get_coeffs(self, points_x, points_y, degree):
        csv = self.write_sample(points_x, points_y)
        coeffs = self.read_cli_output(csv.name, degree)
        csv.close()
        return coeffs

    def read_sample(self, csv_file):
        points_x = []
        points_y = []
        with open(csv_file, 'r') as f:
            reader = csv.reader(f)
            for row in reader:
                points_x.append(float(row[0]))
                points_y.append(float(row[1]))
        return [points_x, points_y]

    def write_sample(self, points_x, points_y):
        sample = tempfile.NamedTemporaryFile(mode='w+')
        with sample.file as f:
            writer = csv.writer(f)
            for i in range(0, len(points_x)):
                writer.writerow([points_x[i], points_y[i]])
        return sample

    def read_cli_output(self, csv_file, degree):
        output = commands.getstatusoutput('./cli ' + csv_file + ' ' + str(degree))
        print('\nCLI output:')
        print(output[1])

        lines = output[1].splitlines()
        coeffs = []
        for line in lines[1:]:
            coeffs.append(float(line))
        return coeffs

###############################################################################
# Sample generation                                                           #
###############################################################################

class SampleGenerator:

    def __init__(self):
        # Standard Normal Distribution samples
        self.std_samples = []

        # Sample parameters
        self.set_num_points(20)
        self.variance   = 1
        self.min_x      = -10.0
        self.max_x      = 10.0

        # Distribution parameters
        self.coeffs = [0, 1]    # Order: 1, x, x^2, ..., x^n
        self.set_degree(1)

    def set_num_points(self, num_points):
        self.num_points = num_points
        self.add_std_samples()

    def add_std_samples(self):
        # Add new samples if needed
        while len(self.std_samples) < self.num_points: self.std_samples.append(numpy.random.normal())        

    def regenerate_sample(self):
        self.std_samples = []
        self.add_std_samples()

    def set_degree(self, degree):
        self.degree = degree

        # Add new elements to the coefficients list if needed
        while len(self.coeffs) < degree + 1: self.coeffs.append(0.0)

    def get_points_x(self):
        bounds = [self.min_x, self.max_x]
        step = (max(bounds) - min(bounds)) / self.num_points
        return numpy.arange(min(bounds), max(bounds), step)

    def get_points_y(self):
        points_y = []
        i = 0
        for x in self.get_points_x():
            points_y.append(numpy.polyval(self.get_coeffs(), x) +
                            self.std_samples[i] * self.variance)
            i += 1
        return points_y

    def get_coeffs(self):
        coeffs = self.coeffs[:self.degree + 1]
        coeffs.reverse()
        return coeffs

###############################################################################
# GUI code                                                                    #
###############################################################################

class GUI:

    # Sample types
    GENERATED_SAMPLE = 0
    CSV_SAMPLE       = 1

    def __init__(self):
        self.approx_degree = 1
        self.cli           = CLI()
        self.samplegen     = SampleGenerator()
        self.csv_sample    = None
        self.sample_type   = GUI.GENERATED_SAMPLE
        self.build_interface()

    def build_interface(self):
        # Load main window
        self.builder = Gtk.Builder()
        self.builder.add_from_file('gui.ui')
        self.window = self.builder.get_object('window')
        self.window.connect('delete-event', Gtk.main_quit)
        
        # Initialize SpinButtons
        self.builder.get_object('approx_degree').set_adjustment(Gtk.Adjustment(1,  1,      100,  1,   10, 0))
        self.builder.get_object('num_points')   .set_adjustment(Gtk.Adjustment(20, 2,      9999, 1,   10, 0))
        self.builder.get_object('variance')     .set_adjustment(Gtk.Adjustment(1,  0,      9999, 0.1, 1,  0))
        self.builder.get_object('min_x')        .set_adjustment(Gtk.Adjustment(-1, -9999,  9999, 0.1, 1,  0))
        self.builder.get_object('max_x')        .set_adjustment(Gtk.Adjustment(1,  -9999,  9999, 0.1, 1,  0))
        self.builder.get_object('dist_degree')  .set_adjustment(Gtk.Adjustment(1,  1,      100,  1,   10, 0))

        # Load initial values
        self.builder.get_object('approx_degree').set_value(self.approx_degree)
        self.builder.get_object('num_points')   .set_value(self.samplegen.num_points)
        self.builder.get_object('variance')     .set_value(self.samplegen.variance)
        self.builder.get_object('min_x')        .set_value(self.samplegen.min_x)
        self.builder.get_object('max_x')        .set_value(self.samplegen.max_x)
        self.builder.get_object('dist_degree')  .set_value(self.samplegen.degree)

        # Set up event handling
        self.approx_degree_event_enabled = True
        self.builder.get_object('approx_degree')    .connect('value-changed', self.on_approx_degree_change)
        self.builder.get_object('num_points')       .connect('value-changed', self.on_num_points_change)
        self.builder.get_object('variance')         .connect('value-changed', self.on_variance_change)
        self.builder.get_object('min_x')            .connect('value-changed', self.on_min_x_change)
        self.builder.get_object('max_x')            .connect('value-changed', self.on_max_x_change)
        self.builder.get_object('regenerate_sample').connect('clicked',       self.on_regenerate_sample)
        self.builder.get_object('dist_degree')      .connect('value-changed', self.on_dist_degree_change)
        self.builder.get_object('load_csv')         .connect('clicked',       self.on_load_csv)
        self.builder.get_object('center')           .connect('clicked',       self.on_center)

        # Configure matplotlib
        matplotlib.rcParams['font.size'] = 8

        # Add matplotlib widget
        figure = Figure(figsize=(5,4), dpi=100)
        self.canvas = FigureCanvas(figure)  # a Gtk.DrawingArea
        self.canvas.set_size_request(600, 500)
        self.builder.get_object('plot_box').pack_start(self.canvas, True, True, 0)
        self.builder.get_object('toolbar_box').pack_start(
            NavigationToolbar(self.canvas, self.window), False, False, 0)

        # Initialize plot
        self.plot = figure.add_subplot(111)

        # Draw initial inteface and enter main loop
        self.update_coeffs_grid()
        self.update_plot(recalculate_limits=True)
        self.window.show_all()
        Gtk.main()

    def update_coeffs_grid(self):
        # Destroy old coefficients grid
        coeffs_box = self.builder.get_object('coeffs_box')
        coeffs_box.get_children()[0].destroy()
        grid = Gtk.Grid()
        grid.set_row_spacing(5)
        grid.set_column_homogeneous(True)

        # Add GUI elements for each coefficient
        row = 0
        for i in reversed(range(self.samplegen.degree + 1)):
            print('Gui element: ' + str(i))

            # Label
            if i == 0:   text = '1'
            elif i == 1: text = 'x'
            else:        text = 'x^' + str(i)
            label = Gtk.Label(text)
            grid.attach(label, 0, row, 1, 1)

            # SpinButton
            spin = Gtk.SpinButton()
            spin.set_adjustment(Gtk.Adjustment(self.samplegen.coeffs[i], -9999, 9999, 0.01, 1, 0))
            spin.set_numeric(True)
            spin.set_digits(2)
            spin.coeff_index = i
            spin.connect('value-changed', self.on_coeff_change)
            grid.attach(spin, 1, row, 1, 1)

            row += 1

        # Add new coefficients grid
        coeffs_box.add(grid)
        coeffs_box.show_all()

    def update_plot(self, recalculate_limits=False, csv=None):
        # Load sample from CSV file if needed
        if csv != None:
            try:
                self.csv_sample  = self.cli.read_sample(csv)
                self.sample_type = GUI.CSV_SAMPLE
                recalculate_limits = True
            except:
                dialog = Gtk.MessageDialog(self.window, 0, Gtk.MessageType.ERROR,
                                           Gtk.ButtonsType.OK, "Invalid CSV file. Check format.")
                dialog.run()
                dialog.destroy()
                return

        # Decide where the sample is coming from
        if self.sample_type == GUI.CSV_SAMPLE:
            points_x = self.csv_sample[0]
            points_y = self.csv_sample[1]
        else:
            points_x = self.samplegen.get_points_x()
            points_y = self.samplegen.get_points_y()

        # Limit the maximum approximation degree based on the sample size
        max_degree = len(points_x) - 1
        self.approx_degree = min(max_degree, self.approx_degree)

        # Update the approx_degree SpinButton
        self.approx_degree_event_enabled = False
        self.builder.get_object('approx_degree').get_adjustment().set_upper(max_degree)
        self.builder.get_object('approx_degree').set_value(self.approx_degree)
        self.approx_degree_event_enabled = True

        # Compute the least squares approximation
        coeffs = self.cli.get_coeffs(points_x, points_y, self.approx_degree)

        # Compute range used to plot the approximation and sample distribution
        x_0 = min(points_x)
        x_n = max(points_x)
        step = (x_n - x_0) / 50
        xs = numpy.arange(x_0, x_n + step, step)

        # Save x and y limits if required
        if recalculate_limits:
            xlim = [x_0, x_n]
            ylim = [min(points_y), max(points_y)]

            for lim in [xlim, ylim]:
                margin = (lim[1] - lim[0]) * 0.1
                lim[0] -= margin
                lim[1] += margin
        else:
            xlim = self.plot.get_xlim()
            ylim = self.plot.get_ylim()

        # List of plot legends in the same order they're rendered
        legend = []

        self.plot.clear()
        self.plot.set_title('Least squares approximation of degree ' + str(self.approx_degree))
        
        # Plot sample
        self.plot.plot(points_x, points_y, 'ro')
        legend.append('Sample')

        # Plot sample distribution
        if self.sample_type == GUI.GENERATED_SAMPLE:        
            self.plot.plot(xs, numpy.polyval(self.samplegen.get_coeffs(), xs), 'r-')
            legend.append('Sample distribution')

        # Plot least squares approximation
        self.plot.plot(xs, numpy.polyval(coeffs, xs), 'b-')
        legend.append('Least squares approximation')

        # Add legend
        self.plot.legend(tuple(legend), 'lower right').get_frame().set_alpha(0.5)

        # Update X and Y limits
        self.plot.set_xlim(xlim)
        self.plot.set_ylim(ylim)
        
        # Refresh canvas widget
        self.canvas.queue_draw()

        # Update 'Results' TextView
        self.update_results(coeffs)
    
    def update_results(self, coeffs):
        results = ''

        # Generate a text representation of the approximated polynomial, e.g.:
        # 2.643 * x^2 +
        # -1.20 * x +
        # 10.0
        i = len(coeffs) - 1
        for coeff in coeffs:
            results += str(coeff)
            if i > 1:
                results += ' * x^' + str(i) + ' +\n'
            if i == 1:
                results += ' * x +\n'
            i -= 1

        # Update the 'Results' TextView with the generated text representation
        self.builder.get_object('results').get_buffer().set_text(results)

    def update_plot_with_generated_sample(self):
        recalculate_limits = self.sample_type == GUI.CSV_SAMPLE
        self.sample_type = GUI.GENERATED_SAMPLE
        self.update_plot(recalculate_limits=recalculate_limits)

    def on_approx_degree_change(self, object):
        if self.approx_degree_event_enabled:
            self.approx_degree = object.get_value_as_int()
            self.update_plot()

    def on_num_points_change(self, object):
        self.samplegen.set_num_points(object.get_value_as_int())
        self.update_plot_with_generated_sample()

    def on_variance_change(self, object):
        self.samplegen.variance = object.get_value()
        self.update_plot_with_generated_sample()

    def on_min_x_change(self, object):
        self.samplegen.min_x = object.get_value()
        self.update_plot_with_generated_sample()

    def on_max_x_change(self, object):
        self.samplegen.max_x = object.get_value()
        self.update_plot_with_generated_sample()

    def on_regenerate_sample(self, object):
        self.samplegen.regenerate_sample()
        self.update_plot_with_generated_sample()

    def on_dist_degree_change(self, object):
        self.samplegen.set_degree(object.get_value_as_int())
        self.update_coeffs_grid()
        self.update_plot_with_generated_sample()

    def on_coeff_change(self, object):
        self.samplegen.coeffs[object.coeff_index] = object.get_value()
        self.update_plot_with_generated_sample()

    def on_load_csv(self, object):
        dialog = Gtk.FileChooserDialog("Please choose a file", self.window,
                                       Gtk.FileChooserAction.OPEN,
                                       (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
                                        Gtk.STOCK_OPEN, Gtk.ResponseType.OK))
        csv_filter = Gtk.FileFilter()
        csv_filter.set_name("CSV files")
        csv_filter.add_mime_type("text/csv")
        dialog.add_filter(csv_filter)

        any_filter = Gtk.FileFilter()
        any_filter.set_name("Any files")
        any_filter.add_pattern("*")
        dialog.add_filter(any_filter)

        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            self.update_plot(csv=dialog.get_filename())

        dialog.destroy()

    def on_center(self, object):
        self.update_plot(recalculate_limits=True)

if __name__ == '__main__':
    GUI()